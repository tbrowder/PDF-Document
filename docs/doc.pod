=begin pod

=head1 NAME

C<PDF::Document> - Provides high-level classes and routines to create
      original documents in Portable Document Format (PDF)

=head1 SYNOPSIS

=begin code :lang<raku>
use PDF::Document;
show-corefonts;
=end code

Produces:
=begin code :lang<raku>
Font family: 'Courier'               (alias: 'c')
Font family: 'Courier-Bold'          (alias: 'ch')
Font family: 'Courier-BoldOblique'   (alias: 'cbo')
Font family: 'Courier-Oblique'       (alias: 'co')
Font family: 'Helvetica'             (alias: 'h')
Font family: 'Helvetica-Bold'        (alias: 'hb')
Font family: 'Helvetica-BoldOblique' (alias: 'hbo')
Font family: 'Helvetica-Oblique'     (alias: 'ho')
Font family: 'Symbol'                (alias: 's')
Font family: 'Times-Bold'            (alias: 'tb')
Font family: 'Times-BoldItalic'      (alias: 'tbi')
Font family: 'Times-Italic'          (alias: 'ti')
Font family: 'Times-Roman'           (alias: 't')
Font family: 'Zapfdingbats'          (alias: 'z')
=end code

=head1 DESCRIPTION

Module C<PDF::Document> leverages the power of lower-level modules
C<PDF::Lite> and C<Font::AFM> and encapsulates some of its classes,
routines, and variables into higher-level contructs to ease PDF
document creation.

=head2 PostScript document generation process

The module is designed around the document generation process used by
those who use PostScript (PS) code to create PS documents which are
then transformed into PDF by the GNU program C<ps2pdf>. That process
is described in great detail in the classic PS books by Adobe (see
REFERENCES) and is divided into the following logical sequences:

=item Define the prologue which usually includes:
    =item2 Finding the font faces to be used
    =item2 Font selection (creating the actual font by scaling a face to the desired size)
    =item2 Procedure definition
=item Define and render each page
=item End the document

=head3 PostScript font selection

The PS font selection process needs a little more detail to help explain
how it is done in this module. First some terminology. From Ref. 1 we get
some pertinent function names and definitions:

=item B<findfont> 
    - I<key> B<findfont> I<font> 
    - "obtains a font dictionary defined by the I<key> and pushes it on the operand stack...", p. 418
=item I<scalefont>
    - I<font scale> B<scalefont> I<font'> 
    - "applies the scale factor I<scale> to I<font>, producing a new I<font'> whose characters are scaled by I<scale>
      (in both I<x> and I<y>) when they are shown.", p. 488
=item I<setfont>
    - I<font> B<setfont> I<-> 
    - "establishes the font dictionary parameter in the graphics state.", p. 503
=item I<selectfont B<[Level 2]>>
    - I<key scale> B<scalefont> 
    - "obtains a font whose name is I<key>, transforms is according to I<scale>, and establishes it as the current font dictionary
      in the graphics state.", p. 490


The PS Level 1 method for defining a usable font is shown in this example:
=code
/Times-Roman findfont 10 scalefont setfont

The PS Level 2 method for defining a usable font is shown in this example:
=code
/Times-Roman 10 selectfont

(Note the the Level 2 method is "almost always more efficient.", Ref. 1, p. 490)

In either case, we usually save desired combinations of font prototypes by
defining them by another name for easy recall. For example:
=code
/tr12 /Times-Roman 12 selectfont def

Now we can use it like this:
=code tr12 (Howdy, podnuh) show

=head2 PDF document generation process

That sequence is also followed in the PDF document creation process:

=item Define the C<PDF> class instance (a heavy-weight instantiation, only one per document)
    =item2 C<my $pdf = PDF::Lite;>
=item Find the fonts to be used (also a heavy-weight instantiation)
    =item2 C<my $courier = find-font :name<Courier>, :$pdf;>
    =item2 C<my $helvetica> = find-font :name<h>, :$pdf; # use its alias>
=item Select the fonts to be used by adding size to a copy of an existing font family
(a light-weight instantiation)
    =item2 C<my $c10 = select-font :fontfamily($courier), :size(10);>
    =item2 C<my $h12h= select-font :fontfamily($helvetica>, :size(12.5);>
=item Define each page
    =item2 C<my $page = $pdf.add-page;>
    =item2 C<#...add text and graphics...>
    =item2 C<#...add a new page...>
    =item2 C<my $page = $pdf.add-page;>
    =item2 C<#...add text and graphics...>
=item Create the document and exit
    =item2 C<$pdf.save-as<MyDoc.pdf>;>

=head3 PDF font selection

As opposed to PS, the font selection process is a bit different since, with the given low-level routines, we keep the font
"prototype" separate from the desired font size when we use the font in a text block. For example, here is a text block
being rendered on a PDF page instance:

=begin code :lang<raku>
=end code

=head2 Summary

As you can see the document steps are equivalent, but the steps in PDF page
creation are much easier because common low-level code required in PS
creation is available behind the covers in C<PDF::Lite> and accessed
more easily by this module.

=head1 CURRENT CAPABILITY

Currently the only thing the module provides are routines and data to ease
acces to PDF core fonts (those shown in the listing above) in a using module.

=head1 FUTURE CAPABILITY

This module is being used during the development of the author's other PDF modules:

=item C<PDF::Writer>*
=item C<PDF::Labelmaker>**
=item C<PDF::Calendar>
=item C<PDF::ReWriter>
=item C<PDF::Forms>

This module will be updated with more items as the user modules are
updated and published.

NOTE: The asterisk (C<*>) indicates the module has been published. Two asterisks
means the published module is not even minimally useful, but it is exposed to issues or
feature requests from interested parties.

=REFERENCES

=item 1. I<PostScript Language Reference Manual>, 2nd Edition, Adobe Systems Inc., 1990

=head1 AUTHOR

Tom Browder <tbrowder@cpan.org>

=head1 COPYRIGHT and LICENSE

Copyright E<0x00a9> 2021 Tom Browder

This library is free software; you can redistribute it or modify it under the Artistic License 2.0.

=end pod
